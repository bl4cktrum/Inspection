import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;

import javax.swing.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 *
 * @author BL4CKTRUM
 */
public class MainFrame extends javax.swing.JFrame {
    private XSSFWorkbook wb;
    private File file;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() throws IOException, InvalidFormatException {
        file = new File(InspectionGUI.filepath);
        OPCPackage pkg = OPCPackage.open(new FileInputStream(file));
        wb = new XSSFWorkbook(pkg);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        dateField = new javax.swing.JTextField();
        platformSelector = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        confirmArea = new javax.swing.JTextArea();
        confirmButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        monthSelector = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        delButton = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("YOKLAMA");
        setLocationByPlatform(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Platform :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Ogrenci Numarasi :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Adi Soyadi :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Ay :");

        idField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        idField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                idFieldMouseClicked(evt);
            }
        });
        idField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idFieldKeyReleased(evt);
            }
        });

        nameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFieldKeyReleased(evt);
            }
        });

        dateField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        platformSelector.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        platformSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EBA", "Zoom" }));
        platformSelector.setFocusable(false);

        addButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addButton.setText("Ekle");
        addButton.setFocusable(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        confirmArea.setColumns(20);
        confirmArea.setRows(5);
        confirmArea.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jScrollPane1.setViewportView(confirmArea);

        confirmButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        confirmButton.setText("Onayla");
        confirmButton.setFocusable(false);
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Gun :");

        monthSelector.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        monthSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ocak", "Subat", "Mart", "Nisan", "Mayis", "Haziran", "Temmuz", "Agustos", "Eylul ", "Ekim", "Kasim", "Aralik"}));
        monthSelector.setFocusable(false);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Ders :");

        delButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delButton.setText("Cikar");
        delButton.setFocusable(false);
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        jRadioButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jRadioButton1.setText("1. Ders");

        jRadioButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jRadioButton2.setText("2. Ders");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(confirmButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(platformSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(monthSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jLabel5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(dateField))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jRadioButton1)
                                                                .addGap(27, 27, 27)
                                                                .addComponent(jRadioButton2)))))
                                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, 0)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jRadioButton1)
                                                                .addComponent(jRadioButton2)))
                                                .addGap(9, 9, 9)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(platformSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(monthSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(14, 14, 14)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //TAKE INPUTS
        String platform = platformSelector.getSelectedItem().toString();
        String month = monthSelector.getSelectedItem().toString();
        Integer day = Integer.parseInt(dateField.getText());
        Integer lecturehour=0;
        //ikisi de seçili değilse. HATA!
        if(dateField.getText().length()==0){
            JOptionPane.showMessageDialog(InspectionGUI.mf,"Gun giriniz.");
        }
        if(!jRadioButton1.isSelected()&&!jRadioButton2.isSelected()){
            JOptionPane.showMessageDialog(InspectionGUI.mf,"Ders saati seciniz.");
        }
        else {
            //1. Ders
            if (jRadioButton1.isSelected()) {
                lecturehour = 1;
                //FILL TABLE
                int finding = Integer.parseInt(idField.getText());

                DataFormatter formatter = new DataFormatter();
                for (Sheet sheet : wb) {
                    for (Row row : sheet) {
                        boolean sayi = false;
                        try {
                            if (Integer.parseInt(formatter.formatCellValue(row.getCell(0))) != Integer.MIN_VALUE) ;
                            sayi = true;
                            Cell firstcell = row.getCell(0);
                            String text = formatter.formatCellValue(firstcell);
                            if ('0' <= text.charAt(0) && text.charAt(0) <= '9') {
                                int id = Integer.parseInt(text);
                                if (id == finding) { // if you find value
                                    //TODO
                                    //set platform
                                    Row currentRow = sheet.getRow(3);
                                    Cell currentCell = currentRow.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = currentRow.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue(platform);

                                    //set X'es
                                    currentCell = row.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = row.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue("X");

                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }

                //PRINT TO CONFIRM.AREA
                String information = day.toString() + " " + month + " 1. ders "
                        + idField.getText() + " " + nameField.getText() +" eklendi." +  "\n";
                confirmArea.append(information);
            }
            //2. Ders
            if (jRadioButton2.isSelected()) {
                lecturehour = 2;
                //FILL TABLE
                int finding = Integer.parseInt(idField.getText());

                DataFormatter formatter = new DataFormatter();
                for (Sheet sheet : wb) {
                    for (Row row : sheet) {
                        boolean sayi = false;
                        try {
                            if (Integer.parseInt(formatter.formatCellValue(row.getCell(0))) != Integer.MIN_VALUE) ;
                            sayi = true;
                            Cell firstcell = row.getCell(0);
                            String text = formatter.formatCellValue(firstcell);
                            if ('0' <= text.charAt(0) && text.charAt(0) <= '9') {
                                int id = Integer.parseInt(text);
                                if (id == finding) { // if you find value
                                    //TODO
                                    //set platform
                                    Row currentRow = sheet.getRow(3);
                                    Cell currentCell = currentRow.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = currentRow.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue(platform);

                                    //set X'es
                                    currentCell = row.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = row.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue("X");

                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }

                //PRINT TO CONFIRM.AREA
                String information = day.toString() + " " + month + " 2. ders "
                        + idField.getText() + " " + nameField.getText() + " eklendi."+ "\n";
                confirmArea.append(information);
            }

        }
    }

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {
        for(Sheet sheet : wb){
            Row row = sheet.getRow(1);
            Cell cell = row.getCell(56);
            if (cell == null){
                cell = row.createCell(56);
            }
            cell.setCellValue(monthSelector.getSelectedItem().toString());
        }

        try{System.out.println("writing");
            FileOutputStream outputStream = new FileOutputStream(file);
            wb.write(outputStream);
            outputStream.close();
            wb.close();
            JOptionPane.showMessageDialog(InspectionGUI.mf,"Kayit basarili.");
            System.exit(0);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void nameFieldKeyReleased(java.awt.event.KeyEvent evt) {
        idField.setText("");
        System.out.println(nameField.getText());
    }


    private void idFieldKeyReleased(java.awt.event.KeyEvent evt) {
        int finding = Integer.parseInt(idField.getText());


        DataFormatter formatter = new DataFormatter();
        for(Sheet sheet : wb) {
            for(Row row : sheet){
                boolean sayi = false;
                try{
                    if (Integer.parseInt(formatter.formatCellValue(row.getCell(0)))!=Integer.MIN_VALUE);
                    sayi = true;

                    Cell cell = row.getCell(0);
                    String text = formatter.formatCellValue(cell);
                    if('0'<=text.charAt(0) && text.charAt(0)<='9') {
                        int id = Integer.parseInt(text);
                        if (id == finding) {
                            System.out.println(sheet.getSheetName());
                            System.out.println(sheet.getRow(row.getRowNum()).getCell(1));
                            nameField.setText(sheet.getRow(row.getRowNum()).getCell(1).toString());
                        }
                    }

                }
                catch (Exception e){
                    e.printStackTrace();
                }
            }
        }
    }

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //TAKE INPUTS
        String platform = platformSelector.getSelectedItem().toString();
        String month = monthSelector.getSelectedItem().toString();

        Integer day = Integer.parseInt(dateField.getText());
        Integer lecturehour=0;
        //ikisi de seçili değilse. HATA!
        if(dateField.getText().length()==0){
            JOptionPane.showMessageDialog(InspectionGUI.mf,"Gun giriniz.");
        }
        if(!jRadioButton1.isSelected()&&!jRadioButton2.isSelected()){
            JOptionPane.showMessageDialog(InspectionGUI.mf,"Ders saati seciniz.");
        }
        else {
            //1. Ders
            if (jRadioButton1.isSelected()) {
                lecturehour = 1;
                //FILL TABLE
                int finding = Integer.parseInt(idField.getText());

                DataFormatter formatter = new DataFormatter();
                for (Sheet sheet : wb) {
                    for (Row row : sheet) {
                        boolean sayi = false;
                        try {
                            if (Integer.parseInt(formatter.formatCellValue(row.getCell(0))) != Integer.MIN_VALUE) ;
                            sayi = true;
                            Cell firstcell = row.getCell(0);
                            String text = formatter.formatCellValue(firstcell);
                            if ('0' <= text.charAt(0) && text.charAt(0) <= '9') {
                                int id = Integer.parseInt(text);
                                if (id == finding) { // if you find value
                                    //TODO
                                    //set platform
                                    Row currentRow = sheet.getRow(3);
                                    Cell currentCell = currentRow.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = currentRow.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue(platform);

                                    //set X'es
                                    currentCell = row.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = row.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue(" ");

                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }

                //PRINT TO CONFIRM.AREA
                String information = day.toString() + " " + month + " 1. ders "
                        + idField.getText() + " " + nameField.getText() + " cikarildi."+"\n";
                confirmArea.append(information);
            }
            //2. Ders
            if (jRadioButton2.isSelected()) {
                lecturehour = 2;
                //FILL TABLE
                int finding = Integer.parseInt(idField.getText());

                DataFormatter formatter = new DataFormatter();
                for (Sheet sheet : wb) {
                    for (Row row : sheet) {
                        boolean sayi = false;
                        try {
                            if (Integer.parseInt(formatter.formatCellValue(row.getCell(0))) != Integer.MIN_VALUE) ;
                            sayi = true;
                            Cell firstcell = row.getCell(0);
                            String text = formatter.formatCellValue(firstcell);
                            if ('0' <= text.charAt(0) && text.charAt(0) <= '9') {
                                int id = Integer.parseInt(text);
                                if (id == finding) { // if you find value
                                    //TODO
                                    //set platform
                                    Row currentRow = sheet.getRow(3);
                                    Cell currentCell = currentRow.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = currentRow.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue(platform);

                                    //set X'es
                                    currentCell = row.getCell(day * 2 + lecturehour - 1);
                                    if (currentCell == null) {
                                        currentCell = row.createCell(day * 2 + lecturehour - 1);
                                    }
                                    currentCell.setCellValue(" ");

                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }

                //PRINT TO CONFIRM.AREA
                String information = day.toString() + " " + month + " 2. ders "
                        + idField.getText() + " " + nameField.getText() + " cikarildi."+ "\n";
                confirmArea.append(information);

            }

        }
    }
    private void idFieldMouseClicked(java.awt.event.MouseEvent evt) {
        idField.setText("");
        nameField.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (InvalidFormatException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton delButton;
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea confirmArea;
    private javax.swing.JButton confirmButton;
    private javax.swing.JTextField dateField;
    private javax.swing.JTextField idField;
    private javax.swing.JComboBox<String> monthSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JComboBox<String> platformSelector;
    // End of variables declaration
}
